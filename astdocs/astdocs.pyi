import ast
import string
import typing

TPL: string.Template
TPL_CLASSDEF: string.Template
TPL_FUNCTIONDEF: string.Template
TPL_MODULE: string.Template

objects: typing.Any

def format_annotation(a: typing.Union[typing.Any], char: str = ...) -> str: ...
def format_docstring(n: typing.Union[ast.AsyncFunctionDef, ast.ClassDef, ast.FunctionDef, ast.Module]) -> str: ...
def parse_classdef(n: ast.ClassDef): ...
def parse_functiondef(n: typing.Union[ast.AsyncFunctionDef, ast.FunctionDef]): ...
def parse_import(n: typing.Union[ast.Import, ast.ImportFrom]): ...
def parse_tree(n: typing.Any): ...
def render_classdef(filepath: str, name: str) -> str: ...
def render_functiondef(filepath: str, name: str) -> str: ...
def render_module(name: str, docstring: str = ...) -> str: ...
def render(filepath: str, remove_from_path: str = ...) -> str: ...
def render_recursively(path: str, remove_from_path: str = ...) -> str: ...
def postrender(func: typing.Callable) -> typing.Callable: ...
def main(): ...
